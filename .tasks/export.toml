
[[locations]]
bib_export    = "{export}/bib"
rst_export    = "{export}/rst"

[[tasks.export]]
name             = "_.latex.encoded.bib"
doc              = ["export a bibtex, with latex encoding"]
cli              = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
export_bases     = ["{bib!p}"]
depends_on       = [
        { do="relative?", args=["{fpath!p}"], bases_="export_bases" },
        { do="path.elements", from_="fpath", roots=["."]},
        # skip if the exported bib exists and is recent
        { do="dootle.utils:skip_if_stale", source="{fpath!p}", dest="{bib_export!p}/{fname}" },
]
setup           = [
        { do="dootle.bibtex:InitDb",      update_="bib_db"},
        { do="dootle.bibtex:BuildReader", update_="bib_reader",   stack="taskcode.parse_stacks:build_general_stack" },
        { do="dootle.bibtex:BuildWriter", update_="bib_writer",   stack="taskcode.write_stacks:build_export_latex_stack" },
]
actions = [
        { do="log", msg="Exporting: {fname}" },
        { do="dootle.bibtex:DoLoad", from_="fpath",  update_="bib_db",   reader_="bib_reader"},
        { do="dootle.bibtex:ToStr",  from_="bib_db", update_="bib_text", writer_="bib_writer"},
        { do="write!", from_="bib_text", to="{bib_export!p}/{fname}"},
]
cleanup = [
        { do="touch", args=["{fpath!p}"], soft=true},
        { do="log", msg="Exported {fname} to {bib_export!p}"},
]

[[tasks.export]]
name       = "_.to.rst"
cli        = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false }]
depends_on = [
        {do="relative?",  args=["{fpath!p}"], bases=["{bib!p}"]},
        {do="path.elements", from_="fpath", roots=["{bib!p}"]},
        # skip if the exported bib exists and is recent
        {do="dootle.utils.recency_test:stale_test", source_="fpath", dest="{rst_export!p}/{fstem}.rst" },

]
setup           = [
        { do="dootle.bibtex:InitDb",      update_="bib_db"},
        { do="dootle.bibtex:BuildReader", update_="bib_reader",  stack="taskcode.parse_stacks:build_general_stack"},
        { do="dootle.bibtex:BuildWriter", update_="bib_writer",  class="bibble.io.RstWriter", stack="taskcode.write_stacks:build_export_rst_stack"},
]
actions              = [
        {do="log", msg="Exporting {fname} to rst"},
        { do="dootle.bibtex:DoLoad",  from_="fpath",  update_="bib_db",   reader-="bib_reader"},
        { do="dootle.bibtex:ToStr",   from_="bib_db", update_="bib_text", writer_="bib_writer", to="{rst_export!p}/{fstem}.rst"},
]
cleanup = [
        {do="exists?", args=["{rst_export!p}/{fstem}.rst"], fail=true},
        {do="log",   msg="Compiled {fname} to {rst_export}"},
]

[[tasks.export]]
name    = "_.to.calendar"
version = "0.1"
ctor    = "job"
doc     = ["create a calendar of when entries were added to the db"]
setup   = []
actions = []
cleanup = []

[[tasks.export]]
name             = "_.to.tex"
ctor             = "task"
cli              = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
must_inject      = ["fpath"]
author           = "jg"
depends_on       = [
    {task="export::_.latex.encoded.bib", inject={now=["fpath"]}},
    {task="compile::_.gen.template", inject={now=["fpath"]}},
    {do="relative?", args=["{fpath!p}"], bases=["{bib!p}"]},
    {do="path.elements", from_="fpath", roots=["{bib!p}"]},
    # skip if the exported bib exists and is recent
    {do="dootle.utils:skip_if_stale", source_="fpath", dest="{pdf_export!p}/{fstem}.pdf" },
]
setup            = [
    # Load template
    {do="path.elements", from_="fpath", roots=["{bib!p}"]},
    {do="read",          from="{tex_template!p}", update_="template"},
]
actions =[
    # expand the template
    {do="dootle.utils:ExpandTemplate", template_="template", title="{fstem}", target="./{fstem}.bib", update_="tex"},
    # Write it to a temp file
    {do="write!", from_="tex", to="{tex_export!p}/{fstem}.tex"},
]
