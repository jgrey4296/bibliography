## compile.toml -*- mode: conf-toml -*-

[[locations]]
tex_template = {file="~/github/_templates/tex-config/tex/export_template_py.tex"}
tex_export   = "{export}/tex"
tex_fail     = "{export}/tex/failed"
pdf_export   = "{export}/pdfs"
html_export  = "{export}/html"

[[tasks.compile]]
name             = "_.to.pdf"
ctor             = "task"
doc              = ["given fpath in {bib}, get its exported version, and compile it"]
cli              = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
tex_prog         = "pdflatex"
author           = "jg"
depends_on       = [
    {do="installed?", args=["pdftex", "bibtex"] },
    {do="relative?", args=["{fpath}"], bases=["{bib}"]},
    # {task="export::_.one.bib", constraints=["fpath"]},
]
setup            = [
    # Load template
    {do="path.elements", from_="fpath", roots=["{bib}"]},
    {do="exists?"  , args=["{bib_export}/{fstem}.bib"], fail=true },
    {do="read", from="{tex_template}", update_="template"},
]
actions =[
    # expand the template
    {do="dootle.utils.template_expansion:TemplateExpansion", template_="template", title="{fstem}", target="{bib_export}/{fstem}.bib", update_="tex"},
    # Write it to a temp file
    {do="write!", args=["{tex}"], to="{tex_export}/{fstem}.tex"},
    # compile tex
    {do="shell", args=["{tex-prog}", "--output-directory={tex_export}", "-interaction=nonstopmode", "{tex_export}/{fstem}"]},
    {do="exists?", args=["{tex_export}/{fstem}.pdf"], fail=true },
    # compile bib
    {do="shell", args=["bibtex", "--terse", "{tex_export}/{fstem}"], cwd="{tex_export}"},
    # link crossrefs
    {do="shell", args=["{tex-prog}", "--output-directory={tex_export}", "-interaction=nonstopmode", "{tex_export}/{fstem}"]},
    {do="shell", args=["{tex-prog}", "--output-directory={tex_export}", "-interaction=nonstopmode", "{tex_export}/{fstem}"]},
]
cleanup = [
    {do="exists?", args=["{tex_export}/{fstem}.pdf"], fail=true },
    # remove intermediate artifacts
    {do="delete!", args=["{tex_export}/{fstem}.aux", "{tex_export}/{fstem}.bbl", "{tex_export}/{fstem}.blg"]},
    {do="delete!", args=["{tex_export}/{fstem}.log", "{tex_export}/{fstem}.out", "{tex_export}/{fstem}.tex"]},
    # put the final pdf in the right place
    {do="move", from="{tex_export}/{fstem}.pdf", to="{pdf_export}/{fstem}.pdf"},
]

[[tasks.compile]]
name                 = "_.to.html"
version              = "0.1"
ctor                 = "task"
cli                  = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
depends_on           = [
        {task="export::_.one.bib", injections={fpath="fpath"}},
        {do="installed?", args=["bibtex2html"]},
        {do="relative?", args=["{fpath}"], bases=["{bib}"]},
        {do="path.elements", from_="fpath", roots=["{bib}"]},
        {do="exists?", args=["{bib_export}/{fname}"], fail=true},
]
actions              = [
        # Run bibtex2html
        {do="shell", args=["bibtex2html", "-o", "{html_export}/{fstem}", "{bib_export}/{fname}"]},
]
cleanup = [
        {do="exists?", args=["{html_export}/{fstem}.html"], fail=true},
        {do="touch", args=["{fpath}"]},
        {do="log",   msg="Compiled {fname} to {html_export}"},
]

[[tasks.compile]]
name                 = "_.failed"
version              = "0.1"                                    # <str>
doc                  = ["Anything that has a tex file, but not a pdf, has failed somehow"]
ctor                 = "job"                                   # <str>
queue_behaviour      = "default"                                # <str>                default | auto | reactive
exts                 = [".bib"]                                 # <list[str]>
roots                = ["{bib}"]                                # <list[str|pl.Path]>  Places the Walker will start
actions = [
        {do="job.walk",   update_="files"}, # walk,
        {do="job.expand", from_="files", update_="tasks", inject={replace=["fpath"]}, template_="sub_actions"},
        {do="job.queue",  from_="tasks"}, # queue
]
sub_actions          = [
                     # if pdf exists in temp for bib, silent
                     # else complain
]

[[tasks.compile]]
name    = "_.to.calendar"
version = "0.1"
ctor    = "job"
doc     = ["create a calendar of when entries were added to the db"]
