## compile.toml -*- mode: conf-toml -*-

[[locations]]
tex_template = {file="~/github/_templates/tex-config/tex/export_template.tex"}
tex_export   = "{export}/tex"
tex_fail     = "{export}/tex/failed"
pdf_export   = "{export}/pdfs"
html_export  = "{export}/html"

[[tasks.compile]]
name             = "_.to.pdf"
ctor             = "task"
cli              = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
depends_on       = [{task="export::_.one.bib", fpath_="fpath"}]
setup = [
    # Load template
]
actions =[
    # set title, bib file
    # compile tex
    # compile bib
    # compile tex
    # compile tex
]
cleanup = [
    # remove intermediate artifacts
]




[[tasks.compile]]
name                 = "_.to.html"
version              = "0.1"
ctor                 = "task"
export_bases         = ["{bib_export}"]
cli                  = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
depends_on           = [
        {task="export::_.one.bib", fpath_="fpath"},
]
actions              = [
        {do="relative?", args=["{fpath}"], bases_="export_bases"},
        {do="path.elements", from_="fpath", roots_="export_bases"},
        # Run bibtex1html
        {do="shell", args=["bibtex2html", "-o", "{html_export}/{fstem}", "{fpath}"]},
        {do="touch", args=["{fpath}"]},
]


[[tasks.compile]]
name                 = "_.failed"
version              = "0.1"                                    # <str>
doc                  = ["Anything that has a tex file, but not a pdf, has failed somehow"]
ctor                 = "job"                                   # <str>
queue_behaviour      = "default"                                # <str>                default | auto | reactive
exts                 = [".bib"]                                 # <list[str]>
roots                = ["{bib}"]                                # <list[str|pl.Path]>  Places the Walker will start
actions = [
        {do="job.walk",   update_="files"}, # walk,
        {do="job.expand", from_="files", update_="tasks", inject={replace=["fpath"]}, template_="sub_actions"},
        {do="job.queue",  from_="tasks"}, # queue
]
sub_actions          = [
                     # if pdf exists in temp for bib, silent
                     # else complain
]


[[tasks.compile]]
name    = "_.to.calendar"
version = "0.1"
ctor    = "job"
doc     = ["create a calendar of when entries were added to the db"]
