## pdfs.toml -*- mode: toml-mode -*-
# Summary:
#
# Tags:
#
doot-version = "1.0"

[[locations]]
tex_template  = "file::>~/github/_templates/tex-config/tex/export_template_py.tex"
tex_export    = "{export}/tex"
tex_fail      = "{export}/tex/failed"
pdf_export    = "{export}/pdfs"
html_export   = "{export}/html"
cal_export    = "{export}/calendar"

[[tasks.make]]
disabled = true
name             = "pdf.from.bibtex"
doc              = ["given fpath in {bib}, get its exported version, and compile it"]
cli              = [{ name="<1>fpath", type="str", default="", desc=""}]
must_inject      = ["fpath"]
tex_prog         = "pdflatex"
depends_on       = [
    {task="bibtex::export.to.latex",   inject={now=["fpath"]}},
    {task="make::_.generate.tex", inject={now=["fpath"]}},
    {do="installed?", args=["pdftex", "bibtex"] },
    {do="relative?", args=["{fpath!p}"], bases=["{bib!p}"]},
    {do="path.elements", from_="fpath", roots=["{bib!p}"]},
    # skip if the exported bib exists and is recent
    { do="dootle.utils:skip_if_stale", source_="fpath", dest="{pdf_export!p}/{fstem}.pdf" },
]
setup            = [
    {do="copy", from="{bib_export!p}/{fstem}.bib", to="{tex_export!p}/{fstem}.bib"},
    {do="exists?"  , args=["{tex_export!p}/{fstem}.bib", "{tex_export!p}/{fstem}.tex"], fail=true },
] 
actions = [
    {do="log", msg="Compiling to pdf: {fname}"},
    # compile tex
    {do="shell!", args=["{tex_prog}", "--output-directory=.", "-interaction=nonstopmode", "./{fstem}"], cwd="{tex_export!p}"},
    {do="exists?", args=["{tex_export!p}/{fstem}.pdf"], fail=true },
    # compile bib
    {do="log", msg="Compiling Bib"},
    {do="shell!", args=["bibtex", "--terse", "./{fstem}"], cwd="{tex_export!p}"},
    # link crossrefs
    {do="log", msg="Crossreferencing"},
    {do="shell!", args=["{tex_prog}", "--output-directory=.", "-interaction=nonstopmode", "./{fstem}"], cwd="{tex_export!p}"},
    {do="shell!", args=["{tex_prog}", "--output-directory=.", "-interaction=nonstopmode", "./{fstem}"], cwd="{tex_export!p}"},
]
cleanup = [
    {do="exists?", args=["{tex_export!p}/{fstem}.pdf"]},
    # remove intermediate artifacts
    {do="delete!", args=["{tex_export!p}/{fstem}.aux", "{tex_export!p}/{fstem}.bbl", "{tex_export!p}/{fstem}.blg"]},
    {do="delete!", args=["{tex_export!p}/{fstem}.log", "{tex_export!p}/{fstem}.out"]},
    {do="delete!", args=["{tex_export!p}/{fstem}.tex", "{tex_export!p}/{fstem}.bib"]},

    {do="exists?", args=["{out!p}/{fstem}.pdf"], not=true},
    # put the final pdf in the pdf export loc place
    {do="move", from="{tex_export!p}/{fstem}.pdf", to="{pdf_export!p}/{fstem}.pdf", force=true},
]

[[tasks.make]]
disabled = true
name             = "_.generate.tex"
cli              = [{ name="-fpath", type="str", default="", desc=""}]
must_inject      = ["fpath"]
author           = "jg"
depends_on       = [
    {task="bibtex::export.to.latex", inject={now=["fpath"]}},
    {do="relative?", args=["{fpath!p}"], bases=["{bib!p}"]},
    {do="path.elements", from_="fpath",  roots=["{bib!p}"]},
    # skip if the exported bib exists and is recent
    {do="dootle.utils:skip_if_stale", source_="fpath", dest="{pdf_export!p}/{fstem}.pdf" },
]
setup            = [
    # Load template
    {do="path.elements", from_="fpath", roots=["{bib!p}"]},
    {do="read",          from="{tex_template!p}", update_="template"},
]
actions =[
    # expand the template
    {do="dootle.utils:ExpandTemplate", template_="template", title="{fstem}", target="./{fstem}.bib", update_="tex"},
    # Write it to a temp file
    {do="write!", from_="tex", to="{tex_export!p}/{fstem}.tex"},
]
