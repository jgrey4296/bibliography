## changed.toml -*- mode: conf-toml -*-

## Collected tasks for processing changed files after they have been committed
##
##
[[locations]]
processed = {loc="{temp}/processed"}

[[tasks.changed]]
name       = "report"
doc        = ["List the files that have changed since the cached commit"]
roots      = ["{bib!p}"]
exts       = [".bib"]
cache      = "{temp}/precommit::post.commit_cache"
head_count = 2
actions    = [
   {do="dootle.utils.commit_caching:GetChangedFilesByCommit", update_="changed" },
   {do="taskcode.precommit:print_changed"},
]

[[tasks.changed]]
name             = "_.one.bib"
doc              = ["run updates for a changed bibtex"]
version          = "0.1"
ctor             = "job"
cli              = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
inject           = ["fpath"]
roots            = ["{bib!p}"]
depends_on       = [
    # Check the fpath is a bibtex and in the library
    { do="ext?",      args=["{fpath!p}"], exts=[".bib"] },
    { do="relative?", args=["{fpath!p}"], bases_="roots"},
    { do="exists?", args=["{fpath!p}"], fail=true},
    { task="format::_.by.year", inject={fpath="fpath"} },
]
setup            = [
    # build the parse and export stacks, and the db
    { do="path.elements", from_="fpath" },
    { do="dootle.bibtex:BibtexInitAction",   update_="bib_db"},
    { do="taskcode.metadata:build_metadata_parse_stack",  update_="parse_stack"},
]
actions          = [
    { do="log", msg="Reacting to changed bibtex: {fpath}", level="WARN"},
    # Read the file
    { do="dootle.bibtex:BibtexLoadAction",   from_="fpath",     update_="bib_db",   parse_stack_="parse_stack" },
    # Queue Entry Subtasks:
    { do="taskcode.metadata:GenBibEntryTask", template="changed::_.single.entry.update", from_="bib_db", update_="entry_tasks"},
    # { do="taskcode.metadata:GenBibEntryTask", template="extract::_.entry", from_="bib_db", update_="extract_tasks" },
    { do="job.queue", from_="entry_tasks" },
]
head_actions = [
    { task="export::_.one.bib",   inject={fpath="fpath"} }, # Export
    { task="compile::_.to.html",  inject={fpath="fpath"} }, # Compile html
    { task="compile::_.to.pdf" ,  inject={fpath="fpath"} }, # Compile pdf
    # Update Tags:
    { task="tags::_.calculate.update", inject={fpath="fpath"}},
    # Report broken urls:
    # { task="online::_.report.broken", inject={postbox="bibtex::entries..urls"}},
    # Report orphan files
    # { task="orphans::_.report.missing", inject={fpath="fpath"} },
    # TODO Summarise
    # { task="bibtex:_.summarise", inject={fpath="fpath"} },
    {do="path.elements", from_="fpath" },
    {do="say", args=["Finished handling changes for: {fstem}"]},
    {do="touch", args=["{processed!p}/{fstem}"]}
]
cleanup = []

[[tasks.changed]]
name               = "_.single.entry.update"
doc                = ["Entry tasks that do not modify the entry itself"]
inject             = ["entry"]
ctor               = "task"
roots              = ["{pdf_source!p}"]
shadow_roots       = ["{backup_1!p}/library/pdfs", "{backup_2!p}/library/pdfs"]
setup              = []
actions            = [
    {do="taskcode.bibtex:log_entry_name"},
    # ---
    {do="log", msg="... Extracting Tags"},
    {do="taskcode.tags:TagAccumulator"}, # Extract Tags
    # ---
    {do="pred?", pred="taskcode.selector:skip_if_no_file_in_entry"},
    # ---
    {do="log", msg="... TODO: Clamscan files"},
    # {do="shell", args=["clamscan", "--stdout", "{file!p}"]},
    {do="log", msg="... Updating Metadata of entry files"},
    {do="taskcode.bibtex:get_entry_file", update_="entry_file"}, # extract filenames
    {do="path.elements", from_="entry_file"},
    {do="taskcode.metadata:FileMetadataUpdate"}, # Update Metadata
    {do="taskcode.orphans:get_orphans", box="bibtex::entries..orphans"}, # get orphans
    # ---
    {do="log", msg="... TODO Checking Entry Links"},
    # {do="taskcode.online:link_check", box="bibtex::entries..urls"}, # TODO Link check
    # ---
    # Backup Files
    {do="log", msg="... Backing up Files"},
    {do="dootle.utils.multi_shadow:CalculateShadowDirs"}, # Calc shadows
    {do="dootle.utils.multi_shadow:MultiBackupAction", from_="entry_file", pattern="{shadow_path!p}/{fname}"},
]
cleanup = [
    # TODO Remove intermediate files?

]
