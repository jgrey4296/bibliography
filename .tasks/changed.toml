## changed.toml -*- mode: conf-toml -*-

## Collected tasks for processing changed files after they have been committed
##
##
[[locations]]
processed    = {path="{temp}/processed"}
data_drive   = "/media/john/data"
backup_1     = "/media/john/big_ex"
backup_2     = "/media/john/BackupSD"
pdf_source   = "{data_drive}/library/pdfs"
backup_cache = {path="{temp}/backup.commit_cache", file=true}


[[tasks.changed]]
name                  = "_.one.file"
doc                   = ["run updates for a changed bibtex"]
version               = "0.1"
ctor                  = "job"
cli                   = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
must_inject           = ["fpath"]
roots                 = ["{bib!p}"]
sub_task              = "changed::_.single.entry.update"
depends_on            = [
    # Check the fpath is a bibtex and in the library
    { do="ext?",      args=["{fpath!p}"], exts=[".bib"] },
    { do="relative?", args=["{fpath!p}"], bases_="roots"},
    { do="exists?", args=["{fpath!p}"], fail=true},
    { task="format::_.single.file", inject={now=["fpath"]}},
]
setup            = [
    # build the parse and export stacks, and the db
    { do="path.elements", from_="fpath" },
    { do="dootle.bibtex:InitDb",   update_="bib_db"},
    { do="dootle.bibtex:BuildReader", stack="taskcode.parse_stacks:build_meta_stack",  update_="bib_reader"},
]
actions          = [
    { do="log", msg="Reacting to changed bibtex: {fpath}", level="WARN"},

    {do="break!"},
    # Read the file
    { do="dootle.bibtex:DoLoad",   from_="fpath",     update_="bib_db",   reader_="bib_reader"}

    # Queue Entry Subtasks:
    # { do="taskcode.metadata:GenBibEntryTask", template_="sub_task", from_="bib_db", update_="entry_tasks"},
    # { do="job.queue", from_="entry_tasks" },
]
head_actions = [
    # { task="export::_.latex.encoded.bib",   inject={now=["fpath"]} }, # Export
    # { task="export::_.to.rst",              inject={now=["fpath"]} }, # rst for html generation
    # { task="compile::_.to.pdf",             inject={now=["fpath"]} }, # Compile pdf

    # Extract sets from lib
    # { task="tags::_.update.subs"}, # inject={now=["bib_db"]} },
    # Report broken urls:
    # { task="online::_.report.broken", inject={now={postbox="bibtex::entries..urls"}}},
    # Report orphan files
    # { task="orphans::_.report.missing", inject={now=["fpath"]}},
    # TODO Summarise
    # { task="bibtex:_.summarise", inject={now=["fpath"]} },

    {do="path.elements", from_="fpath" },
    {do="say", args=["Finished handling changes for: {fstem}"]},
    {do="touch", args=["{processed!p}/{fstem}"]}
]
cleanup = []

[[tasks.changed]]
name                    = "_.single.entry.update"
doc                     = ["Entry tasks that do not modify the entry itself"]
must_inject             = ["entry"]
ctor                    = "task"
roots                   = ["{pdf_source!p}"]
shadow_roots            = ["{backup_1!p}/library/pdfs", "{backup_2!p}/library/pdfs"]
setup                   = []
actions                 = [
    {do="taskcode.bibtex:log_entry_name"},
    # ---
    {do="log", msg="... Extracting Tags"},
    # ---
    {do="pred?", pred="taskcode.selector:skip_if_no_file_in_entry"},
    # ---
    {do="log", msg="... TODO: Clamscan files"},
    # {do="shell", args=["clamscan", "--stdout", "{file!p}"]},
    {do="log", msg="... Updating Metadata of entry files"},
    {do="taskcode.bibtex:get_entry_file", update_="entry_file"}, # extract filenames
    {do="path.elements", from_="entry_file"},
    {do="taskcode.metadata:FileMetadataUpdate"}, # Update Metadata
    {do="taskcode.orphans:get_orphans", box="bibtex::entries..orphans"}, # get orphans
    # ---
    {do="log", msg="... TODO Checking Entry Links"},
    # {do="taskcode.online:link_check", box="bibtex::entries..urls"}, # TODO Link check
    # ---
    # Backup Files
    {do="log", msg="... Backing up Files"},
    {do="dootle.utils.multi_shadow:CalculateShadowDirs"}, # Calc shadows
    {do="dootle.utils.multi_shadow:MultiBackupAction", from_="entry_file", pattern="{shadow_path!p}/{fname}"},
]
cleanup = [
    # TODO Remove intermediate files?

]
