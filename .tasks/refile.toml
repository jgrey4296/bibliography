
[[locations]]
structlib = "{data_drive}/library/pdfs_structured"

[[tasks.refile]]
name    = "_.one.bib"
doc     = [
    "refile each file in each bibtex entry",
    "retargets files into groups based on century"
]
version = "0.1"
ctor    = "job"
cli     = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
must_inject = ["fpath"]
roots            = ["{bib!p}"]
depends_on       = [
    # Check the fpath is a bibtex and in the library
    { do="ext?",      args=["{fpath!p}"], exts=[".bib"] },
    { do="relative?", args=["{fpath!p}"], bases_="roots"},
    { do="exists?", args=["{fpath!p}"],   fail=true},
    { task="format::_.single.file",       inject={now=["fpath"]} },
]
setup            = [
    # build the parse and export stacks, and the db
    { do="path.elements", from_="fpath" },
    { do="dootle.bibtex:BibtexInitAction",   update_="bib_db"},
    { do="taskcode.parse_stacks:build_meta_stack",  update_="parse_stack"},
    { do="taskcode.write_stacks:build_general_stack",  update_="write_stack" },
]
actions          = [
    { do="log", msg="Refiling Entries in: {fpath}", level="WARN"},
    # Read the file
    { do="dootle.bibtex:BibtexLoadAction",   from_="fpath",     update_="bib_db",   parse_stack_="parse_stack" },
    # TODO transform entries
    { do="dootle.bibtex:BibtexToStrAction",  from_="bib_db",    update_="bib_text", write_stack_="write_stack" },
    { do="write!", from_="bib_text", to="{fpath!p}"},
    # Queue Entry Subtasks:
    { do="taskcode.metadata:GenBibEntryTask", template="refile::_.single.entry", from_="bib_db", update_="entry_tasks"},
    { do="job.queue", from_="entry_tasks" },
]

[[tasks.refile]]
name        = "_.single.entry"
doc         = ["Targets: pre20th, 20th_a, 20th_b, 21st_a, 21st_b"]
must_inject = ["entry"]
ctor        = "task"
roots       = ["{pdf_source!p}"]
actions     = [
    {do="taskcode.bibtex:log_entry_name"},
    # --
    # Get files
    # calculate update
    # build dirs
    # hardlink
]
