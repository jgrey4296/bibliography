## tags.toml -*- mode: conf-toml -*-

[[tasks.tags]]
name                     = "calc.new"
version                  = "0.1"                                                                  # <str>
ctor                     = "job"
docs                     = ["calculate canon and new tags"]
roots                    = ["{substitutions}/general"]                                            # <list[str|pl.Path]>  Places the walker will start
exts                     = [".sub"]                                                               # <list[str]>
recursive                = false                                                                  # <bool>
actions                  = [
    {do="job.walk", update_="files"}, # walk,
    {do="job.expand", from_="files", update_="tasks", inject={replace=["fpath"]}, template_="sub_actions"},
    {do="job.queue", from_="tasks"}, # queue
]
sub_actions              = [
    { do="taskcode.tags:read_subs", from="{fpath}", update_="subs" },
    { do="post.put", "tags::calc..allsubs"=["{subs}"] },
]
cleanup = [
    { do="post.get", subs="tags::calc..allsubs" },
    { do="taskcode.tags:merge_subfiles", from_="subs", update_="known_tags" },
    { do="taskcode.tags:read_tags", from="{temp}/tags/totals.tags", update_="total_tags" },
    { do="taskcode.tags:calc_new_tags",   total_="total_tags", known_="known_tags", update_="new_tags" },
    { do="taskcode.tags:calc_canon_tags", known_="known_tags", update_="canon_tags"},
    # Then write them
    { do="write!", from_="new_tags", to="{temp}/tags/new.tags"},
    { do="write!", from_="canon_tags", to="{temp}/tags/canon.tags"},

]

[[tasks.tags]]
name    = "_.calculate.update"
version = "0.1"
inject  = ["postbox"]
ctor    = "job"
actions = [
    # walk and read all sub files
    # merge subs as 'known'
    # get tags from postbox
    # merge tags as 'existing
    # calc difference for 'new'
    # combine for 'total'
    # write out
]


[[tasks.tags]]
name            = "_.extract.bib.finish"
ctor            = "task"
requird_for     = ["file:>{temp}/tags/bib.tags", "file:>{temp}/tags/bib.names"]
queue_behaviour = "reactive"
actions         = [
    { do="post.get", tags="tags::_.extract.bib..tags"},
    { do="taskcode.tags:merge_tagfiles", from_="tags", update_="merged.tags"},
    # Write Tags
    { do="taskcode.tags:write_tag_set", from_="merged.tags", update_="tagstr" },
    { do="write!", from_="tagstr", to="{temp}/tags/bib.tags"},
    # Write names:
    # { do="taskcode.tags:write_name_set", from_="merged.tags", update_="names" },
    # { do="write!", from_="names", to="{temp}/tags/bib.names" }
]



[[tasks.tags]]
name = "_.clean.bib"

[[tasks.tags]]
name = "_.clean.bookmarks"

[[tasks.tags]]
name = "generate.people"

[[tasks.tags]]
name = "generate.total"
