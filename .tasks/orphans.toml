## orphans.toml -*- mode: conf-toml -*-

[[locations]]
orphans = "{temp}/orphans"

[[tasks.orphans]]
name       = "total"
depends_on = ["file:>{orphans}/bib.files", "file:>{orphans}/fs.files"]
actions = [
        # read file lists
        {do="read", from="{orphans}/bib.files", type="lines", update_="bib"}
        {do="read", from="{orphans}/fs.files", type="lines",  update_="fs"}
        # diff them
        {do="taskcode.orphans:diff_filelists"}
        # write results:
        #### mentioned but doesnt exists {orphans}/only_mentioned.files
        #### exists but unmentioned {orphans}/only_exists.files

]

[[tasks.orphans]]
name             = "_bib"
doc              = ["walk all bibfiles, summarise entry files"]
ctor             = "job"
version          = "0.1"
print_levels     = { head="INFO", build="WARNING", execute="INFO", sleep="WARNING", action="WARNING" }
required_for     = [{file="{orphans}/bib.files"}]
roots            = ["{bib}"]
exts             = [".bib"]
actions          = [
    {do="delete!", args=["{orphans}/bib.files"]},
    # walk
    {do="job.walk", update_="walked"},
    # expand
    {do="job.expand",      from_="walked", update_="tasks", inject={replace=["fpath"]}, base_="sub_actions"},
    # queue
    {do="job.queue",       from_="tasks"},
]
sub_actions = [
    { do="ext?", ext=".bib" },
    { do="state.add.path.parts", from_="fpath" },
    { do="dootle.bibtex.v2:BibtexInitAction",   update_="bib_db"},
    { do="taskcode.bibtex:build_working_parse_stack",  update_="parse_stack"},
    { do="dootle.bibtex.v2:BibtexLoadAction",   from_="fpath",     update_="bib_db",   parse_stack_="parse_stack" },
    { do="taskcode.orphans:get_db_files", from_="bib_db" , update_="filelist"},
    # append to {orphans}/bib.files

]

[[tasks.orphans]]
name             = "_filesystem"
doc              = ["walk the library filesystem, summarising all existing files"]
ctor             = "job"
version          = "0.1"
print_levels     = { head="INFO", build="WARNING", execute="INFO", sleep="WARNING", action="WARNING" }
required_for     = [{file="{orphans}/fs.files"}]
roots            = ["{lib-root}"]
exts             = [".pdf", ".epub"]
actions          = [
    {do="delete!", args=["{orphans}/fs.files"]},
    # walk, or use fdfind
    {do="job.walk", update_="walked"},
    # write to {orphans}/fs.files
]
