#!/usr/bin/env bash
#  biblio -*- mode: Bash -*-

set -o nounset

current_script_path="${BASH_SOURCE[0]}"
BIBLIO_SRC=$(realpath "$(dirname "$current_script_path")")

source "$BIBLIO_SRC/lib-util.bash"

#  output --------------------------------------------------

function do_docs () {
    header "biblio docs {target:main} {out:.temp/site}"
    local src="${1:-$BIBLIO_SRC/main}"
    local out="${2:-$BIBLIO_SRC/.temp/site}"
    sphinx-build \
        --conf-dir "$BIBLIO_SRC" \
        --warning-file "$BIBLIO_SRC/.temp/logs/sphinx.log" \
        --builder "bibhtml" \
        "$src" "$out"
}

function do_chunk () {
    header "biblio chunk"
    uv run --script "$BIBLIO_SRC/scripts/bib_chunk.py" "$@"
}

function do_report () {
    header "biblio report"
    uv run --script "$BIBLIO_SRC/scripts/bib_report.py" "$@"
}

function do_android_push () {
    header "TODO: biblio android"
    # setup adb and push biblio_lib
    exit 1
}

function do_tex_compile () {
    header "TODO biblio tex"
    local output="$BIBLIO_ROOT/.temp/tex"
    local template_dir="$BIBLIO_ROOT/templates_"
    # collect tex files, generate separate chapters for each,
    # and export the bibtex files with latex encoding
    uv script --run "$BIBLIO_SRC/scripts/prepare_tex.py" \
        --template-dir "$template_dir" \
        "$@"

    exit 1
    # compile each chapter
    lualatex --interaction=nonstopmode --output-directory="$output" "$output"/*.tex > /dev/null
    BIBINPUT="$output:${BIBINPUTS:-}" bibtex --terse "$output"/*.tex > /dev/null
    lualatex --interaction=nonstopmode --output-directory="$output" "$output"/*.tex /dev/null
    lualatex --interaction=nonstopmode --output-directory="$output" "$output"/*.tex /dev/null

    # join them together
    pdftk cat "$output"/*.pdf output "$output/library.pdf"


}

function do_media_post () {
    header "TODO biblio post"
    uv run --script "$BIBLIO_SRC/scripts/media_post.py" "$@"
    exit 1
}

#  update --------------------------------------------------

function do_bookmarks () {
    header "biblio bookmarks"
    uv run --script "$BIBLIO_SRC/scripts/bookmarks.py" "$@"
}

function do_format () {
    header "biblio format"
    uv run --script "$BIBLIO_SRC/scripts/bib_format.py" "$@"
}

function do_metadata () {
    header "biblio metadata"
    uv run --script "$BIBLIO_SRC/scripts/apply_metadata.py" "$@"
}

function do_online () {
    header "biblio online"
    uv run --script "$BIBLIO_SRC/scripts/bib_online.py" "$@"
}

function do_stub () {
    header "biblio stubs"
    uv run --script "$BIBLIO_SRC/scripts/make_stubs.py" "$@"
}

function do_cleanup () {
    echo "cleanup"
    uv run --script "$BIBLIO_SRC/scripts/clean_todos.py"
}

function do_tags () {
    header "biblio tags"
    uv run --script "$BIBLIO_SRC/scripts/update_tags.py" "$@"
}

function do_backup () {
    local source="${1:-$BIBLIO_LIB}"
    local target="${2:-/media/john/solid_ext4/library}"
    header "Biblio Library Backup: $source -> $target"
    rsync --archive --progress "$source" "$target"
}

function do_restructure () {
    header "biblio restruct"
    uv run --script "$BIBLIO_SRC/scripts/lib_restructure.py" "$@"
}

#   --------------------------------------------------

function print_help () {
    header "biblio scripts"

    echo "-h | --help"
    echo "--docs"
    echo "--bookmarks"
    echo "--post"
    echo "--format"
    echo "--metadata"
    echo "--online"
    echo "--stub"
    echo "--cleanup"
    echo "--chunk"
    echo "--backup"
    echo "--report"
    echo "--restructure"
}

function parse_biblio_args () {
    if [[ "$#" -eq 0 ]]; then
        print_help
        exit 0
    fi
    if [[ "$1" = "biblio" ]]; then
        shift
    fi

    local cmd="$1"
    shift

    case "$cmd" in
        -h|--help)
            print_help
            ;;
        --docs)
            do_docs "$@"
            ;;
        --bookmarks)
            do_bookmarks "$@"
            ;;
        --post)
            do_media_post "$@"
            ;;
        --format)
            do_format "$@"
            ;;
        --metadata)
            do_metadata "$@"
            ;;
        --online)
            do_online "$@"
            ;;
        --stub)
            do_stub "$@"
            ;;
        --cleanup)
            do_cleanup "$@"
            ;;
        --chunk)
            do_chunk "$@"
            ;;
        --backup)
            do_backup "$@"
            ;;
        --report)
            do_report "$@"
            ;;
        --restructure)
            do_restructure "$@"
            ;;
        *) # Positional
            echo "Unknown arg: $1"
            exit 1
            ;;
    esac
}

parse_biblio_args "$@"
