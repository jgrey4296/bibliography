

[[locations]]
chunked      = "{temp}/chunked"
chunk_failed = "{chunked}/failed"

[[tasks.util]]
name                 = "_.missing.pdfs"
version              = "0.1"                                    # <str>
doc                  = ["list any bibs that don't have an exported bib, or a built pdf"]
ctor                 = "job"                                   # <str>
queue_behaviour      = "default"                                # <str>                default | auto | reactive
exts                 = [".bib"]                                 # <list[str]>
roots                = ["{bib!p}"]                                # <list[str|pl.Path]>  Places the Walker will start
actions = [
        {do="job.walk",   update_="files"}, # walk,
        {do="job.expand", from_="files", update_="tasks", inject={insert=["fpath"]}, template_="sub_actions"},
        {do="job.queue",  from_="tasks"}, # queue
]
sub_actions          = [
    # calc path parts
    {do="path.elements", from_="fpath" },
    {do="exists?", args=["{bib_export!p}/{fstem}.bib", "{pdf_export!p}/{fstem}.pdf"], not=true},
    {do="post.put", "compile::missing..files"="{fstem}"},
]
head_actions = [
    {do="post.get", missing="compile::missing..files"},
    {do="log", msg="These are missing:"},
    {do="log", msg="{missing}"},
]

[[tasks.util]]
disabled         = true
name             = "chunk.dir"
doc              = ["Split a directory of bibtex into chunks of a limited number of entries"]
ctor             = "job"
cli              = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
roots            = ["{fpath!p}"]
exts             = [".bib"]
recursive        = false
target_bib_size  = 250
actions          = [
    {do="job.walk",   update_="files" }, # walk
    {do="job.expand", from_="files", template_="sub_actions", inject={now=["target_bib_size"], insert=["fpath"]}, update_="tasks"},
    {do="job.inject.path.elements", onto_="tasks", key_="fpath"},
    {do="job.queue",  from_="tasks"},
]
sub_actions = [
    { do="dootle.bibtex:InitDb",       update_="bib_db"},
    { do="dootle.bibtex:BuildReader",  update_="bib_reader", stack="taskcode.parse_stacks:build_minimal_stack"},
    { do="dootle.bibtex:DoLoad",       update_="bib_db",     from_="fpath", reader_="bib_reader"},
    # convert to n * target_bib_size libraries
    { do="taskcode.chunking:split_library", from_="bib_db", update_="split_libs" },
    # add to postbox
    { do="post.put", args=["split_libs"] },
    # TODO write failed blocks
]
cleanup = ["util::_.chunks.to.files"]

[[tasks.util]]
name = "_.chunks.to.files"
ctor = "job"
setup = [
    {  do="dootle.bibtex:BuildWriter", update_="write_stack", stack="taskcode.write_stacks:build_format_stack"},
    ]
actions = [
    {do="post.get",   data="chunk::dir..-"}, # Get from postbox
    {do="job.expand", from_="data", inject={}, template_="sub_actions", update_="tasks"},
    {do="job.queue",  args=["tasks"]},      # Queue
]
sub_actions = [
    { do="taskcode.chunking:generate_stem", from_="data", update_="fstem"},
    { do="dootle.bibtex:ToStr",  from_="data", update_="bib_text", writer_="bib_writer"},
    { do="write!", from_="bib_text", to="{chunked!p}/{fstem}.bib"},
]

[[tasks.util]]
name       = "report.changed"
doc        = ["List the files that have changed since the cached commit"]
roots      = ["{bib!p}"]
exts       = [".bib"]
cache      = "{temp}/precommit::post.commit_cache"
head_count = 2
actions    = [
   {do="dootle.utils:GetChangedFilesByCommit", update_="changed" },
   {do="taskcode.precommit:print_changed"},
]

[[tasks.util]]
name = "run.on.selection"
ctor = "job"
cli        = [
           # {name="files", type="list", default=[], positional=true},
           {name="choose", type="int", default=1},
           {name="subtask", type="str", default="format::_.single.file"},
           ]
roots      = ["{bib!p}"]
exts       = [".bib"]
actions    = [
   {do="job.walk", update_="files"},
   {do="job.limit", count_="choose", from_="files"},
   {do="log", msg="Chosen Files: {files}"},
   {do="job.expand", from_="files", inject={insert=["fpath"]}, template_="subtask", update_="sub_queue"},
   {do="job.queue", from_=["sub_queue"]},
]

[[tasks.util]]
name          = "_.report.broken.urls"
version       = "0.1"
must_inject   = ["postbox"]
actions       = [
        # Get reported broken urls
        {do="post.get", broken_urls="{postbox}" },
        # write out
        { do="write!", from_="broken_urls", to="{temp!p}/broken.urls"},
]
