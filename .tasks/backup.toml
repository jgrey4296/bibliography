## backup.toml<2> -*- mode: conf-toml -*-

[[locations]]
data_drive   = "/media/john/data"
backup_1     = "/media/john/big_ex"
backup_2     = "/media/john/BackupSD"
pdf_source   = "{data_drive}/library/pdfs"
backup_cache = "{temp}/backup.commit_cache"

[[tasks.backup]]
name                       = "pdfs"
version                    = "0.1"                                                       # <str>
doc                        = ["Backup raw pdf library"]
ctor                       = "job"             # <type>
clean_locs                 = ["{pdf_bkup}"]
exts                       = []                                  # <list[str]>
recursive                  = true                                # <bool>
roots                      = ["{pdf_source}"]                    # <list[str|pl.Path]>  Places the globber will start
shadow_roots               = ["{backup_1}/library/pdfs", "{backup_2}/library/pdfs"]
actions = [
    {do="job.walk", update_="files"}, # walk,
    {do="job.expand", from_="files", update_="tasks", inject={replace=["fpath"]}, template_="sub_actions"},
    {do="job.inject.path.elements", onto_="tasks",  key_="fpath"},
    {do="dootle.utils.multi_shadow:InjectMultiShadow", onto_="tasks", key_="rpath"},
    {do="job.queue", from_="tasks"}, # queue
]
sub_actions                = [
    {do="log", msg="Backing up: {fpath}"},
    {do="dootle.utils.multi_shadow:MultiBackupAction", from_="fpath", pattern="{shadow_path}/{fname}"}
]
cleanup  = [
    {do="doot.actions.postbox:SummarizePostAction", full=false},
    {do="dootle.utils.commit_caching:CacheGitCommit", cache="{backup_cache}"}
]

[[tasks.backup]]
name             = "changed"
doc              = ["Trigger backups of files mentioned in changed bibtex files"]
ctor             = "job"
version          = "0.1"
cli              = [{ name="target", type="str", prefix="-", default="{bib}", desc="", positional=false  }]
roots            = ["{target}"]
exts             = [".bib"]
actions          = [
        # get files changed since commit and head
        {do="dootle.utils.commit_caching:GetChangedFilesByCommit", cache="{backup_cache}" , update_="changed" },
        # expand
        {do="job.expand",      from_="changed", update_="tasks", inject={replace=["fpath"]}, template="backup::_.by.year"},
        {do="taskcode.metadata:report_chosen_files"},
        {do="wait", count=5},
        # queue
        {do="job.queue",       from_="tasks"},
        ]
cleanup = [
        # on complete, cache head commit
        { do="dootle.utils.commit_caching:CacheGitCommit", cache="{meta_cache}"}
]

[[tasks.backup]]
name               = "_.by.year"
doc                = ["backup all files mentioned in a specific bibtex year"]
version            = "0.1"
ctor               = "job"
cli                = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
roots              = ["{pdf_source}", "{bib}"]
shadow_roots       = ["{backup_1}/library/pdfs", "{backup_2}/library/pdfs"]
depends_on         = [
    { do="ext?",      args=["{fpath}"], exts=[".bib"] },
    { do="relative?", args=["{fpath}"], bases_="roots" },
]
setup              = [
    { do="path.elements", from_="fpath"},
    { do="dootle.bibtex:BibtexInitAction",   update_="bib_db"},
    { do="taskcode.backup:build_backup_parse_stack",  update_="parse_stack"},
]
actions            = [
    { do="log", msg="Backup By Year: {fpath}", level="WARN"},
    # Read
    { do="dootle.bibtex:BibtexLoadAction",   from_="fpath",     update_="bib_db",   parse_stack_="parse_stack" },
    { do="taskcode.backup:get_files", from_="bib_db", update_="files" },
    # Queue
    { do="job.expand", from_="files", update_="tasks", inject={replace=["fpath"]}, template_="sub_actions"},
    { do="job.inject.path.elements",   onto_="tasks",  key_="fpath" },
    { do="dootle.utils.multi_shadow:InjectMultiShadow", onto_="tasks", key_="rpath"},

    { do="job.queue", from_="tasks" },
]
sub_actions     = [
    {do="relative?", args=["{fpath}"], bases_="roots"},
    {do="log", msg="Backing up: {fpath}"},
    {do="dootle.utils.multi_shadow:MultiBackupAction", from_="fpath", pattern="{shadow_path}/{fname}"}
]
