## backup.toml<2> -*- mode: conf-toml -*-

[[locations]]
data_drive   = "/media/john/data"
backup_drive = "/media/john/big_ex"
pdf_source   = "{data_drive}/library/pdfs"
pdf_bkup     = "{backup_drive}/library/pdfs"


[[tasks.backup]]
name                       = "pdfs"
version                    = "0.1"                                                       # <str>
doc                        = ["Backup pdf library"]
ctor                       = "job"             # <type>
clean_locs                 = ["{pdf_bkup}"]
print_levels               = {build="WARNING", action="WARNING", execute="INFO"} # <Dict: {'build', 'action', 'sleep', 'head', 'execute'}>
exts                       = []                                  # <list[str]>
recursive                  = true                                # <bool>
roots                      = ["{pdf_source}"]                    # <list[str|pl.Path]>  Places the globber will start
shadow_root                = "{pdf_bkup}"
cleanup  = [
    {do="doot.actions.postbox:SummarizePostAction", full=false}
]
actions = [
    {do="job.walk", update_="files"}, # walk,
    {do="job.expand", from_="files", update_="tasks", inject={replace=["fpath"]}, template_="sub_actions"},
    {do="job.inject.path.elements", onto_="tasks",  key_="fpath"},
    {do="job.inject.shadow", onto_="tasks", key_="rpath"},
    {do="job.queue", from_="tasks"}, # queue
]
sub_actions                = [
    {do="log", msg="Backing up: {fpath}"},
    {do="dir!", args=["{shadow_path}"] },
    {do="backup!", from_="fpath", to="{shadow_path}/{fname}"}
]


[[tasks.backup]]
name               = "_.by.year"
doc                = ["update the file metadata for all entries in a single bib file"]
version            = "0.1"
ctor               = "job"
cli                = [{ name="fpath", type="str", prefix="-", default="", desc="", positional=false  }]
print_levels       = { head="INFO", build="WARNING", execute="WARNING", action="WARNING" }
roots              = ["{pdf_source}", "{bib}"]
shadow_root        = "{pdf_bkup}"
depends_on         = [
    {do="log", msg="running test for backup"},
    { do="ext?",      args=["{fpath}"], exts=[".bib"] },
    { do="relative?", args=["{fpath}"], bases_="roots" },
]
setup              = [
    { do="path.elements", from_="fpath"},
    { do="dootle.bibtex:BibtexInitAction",   update_="bib_db"},
    { do="taskcode.backup:build_backup_parse_stack",  update_="parse_stack"},
]
actions            = [
    { do="log", msg="Backup By Year: {fpath}", level="WARN"},
    # Read
    { do="dootle.bibtex:BibtexLoadAction",   from_="fpath",     update_="bib_db",   parse_stack_="parse_stack" },
    { do="taskcode.backup:get_files", from_="bib_db", update_="files" },
    # Queue
    { do="job.expand", from_="files", update_="tasks", inject={replace=["fpath"]}, template_="sub_actions"},
    { do="job.inject.path.elements",   onto_="tasks",  key_="fpath" },
    { do="job.inject.shadow", onto_="tasks", key_="rpath"},

    { do="job.queue", from_="tasks" },
]
sub_actions     = [
    {do="relative?", args=["{fpath}"], bases_="roots"},
    {do="log", msg="Backing up: {fpath}"},
    {do="dir!",      args=["{shadow_path}"] },
    {do="backup!",   from_="fpath", to="{shadow_path}/{fname}"},
]
